plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
}

archivesBaseName = "${mod_name}-fabric-${minecraft_version}"

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":Common")

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:4.1.1"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:4.1.1"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:4.1.1"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:4.1.1"

    modApi("me.shedaniel.cloth:cloth-config-fabric:6.0.42") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation "de.maxhenkel.voicechat:voicechat-api:${voicechat_api_version}"
//    modRuntimeOnly "maven.modrinth:simple-voice-chat:fabric-${voicechat_version}"
}

loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
    accessWidenerPath = file("src/main/resources/immortuoscalyx.accesswidener")
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }
    maven { url "https://maven.shedaniel.me/" }
    maven { url = 'https://maven.maxhenkel.de/repository/public' }

    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}


processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    filesMatching('*.mixins.json') {
        expand "refmap_target": "${archivesBaseName}-"
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

jar {
    from("LICENSE") {
        rename { "${it}_${mod_name}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
